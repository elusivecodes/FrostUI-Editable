!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e:e(t)}(window,(function(t){"use strict";if(!t)throw new Error("FrostUI-Editable requires a Window.");if(!("UI"in t))throw new Error("FrostUI-Editable requires FrostUI.");const e=t.Core,s=t.dom,i=(t.QuerySet,t.UI);t.document;class n extends i.BaseComponent{constructor(t,e){super(t,e),this._value=null===this._settings.value?s.getText(this._node):this._settings.value,this._enabled=!0,this._buildForm(),this._buildLoader(),this._events(),this._refresh(!0)}dispose(){s.removeEvent(this._node,"click.ui.editable"),this._value?s.removeClass(this._node,"editable"):s.removeClass(this._node,"editable-empty"),s.remove(this._form),s.show(this._node),this._selectmenu?this._selectmenu.dispose():this._datetimepicker&&this._datetimepicker.dispose(),super.dispose()}disable(){return this._enabled=!1,this._refresh(),s.detach(this._form),s.show(this._node),this}enable(){return this._enabled=!0,this._refresh(),this}getValue(){return this._value}setValue(t){return this._enabled&&(this._value=t,s.isConnected(this._form)?this._updateValue():this._refresh()),this}}Object.assign(n.prototype,{_events(){s.addEvent(this._node,"click.ui.editable",t=>{this._enabled&&(t.preventDefault(),this._updateValue(),s.before(this._node,this._form),s.hide(this._node),s.focus(this._input))}),s.addEvent(this._form,"submit.ui.editable",t=>{t.preventDefault();const e=this._settings.getValue?this._settings.getValue(this._input,this):s.getValue(this._input);if(e===this._value)return s.detach(this._form),void s.show(this._node);const i=this._settings.saveValue(e,this._input,this);s.before(this._node,this._loader),s.hide(this._form),Promise.resolve(i).then(t=>{this._value=e,this._refresh(),s.detach(this._form),s.show(this._node)}).finally(t=>{s.detach(this._loader),s.show(this._form)})}),this._settings.buttons?s.addEvent(this._cancel,"click.ui.editable",t=>{t.preventDefault(),s.detach(this._form),s.show(this._node)}):"select"===this._settings.type&&s.addEvent(this._input,"change.ui.editable",t=>{s.triggerEvent(this._form,"submit.ui.editable")})}}),Object.assign(n.prototype,{_refresh(t=!1){if(s.removeClass(this._node,this.constructor.classes.empty),s.removeClass(this._node,this.constructor.classes.editable),!this._enabled)return;let i;if(this._settings.getLabel)i=this._settings.getLabel(this._value,this._input,this);else if("select"===this._settings.type)if(e.isArray(this._value)){const t=[];for(const e of this._value){const i=s.findOne(`option[value="${e}"]`,this._input),n=s.getText(i);t.push(n)}i=t.join(this._settings.separator)}else{const t=s.findOne(`option[value="${this._value}"]`,this._input);i=s.getText(t)}else i=this._value;if(!i&&t&&(i=s.getText(this._node)),!i)return s.setText(this._node,this._settings.emptyText),void s.addClass(this._node,this.constructor.classes.empty);s.setText(this._node,i),s.addClass(this._node,this.constructor.classes.editable)},_updateValue(){this._settings.setValue?this._settings.setValue(this._input,this._value,this):this._selectmenu?this._selectmenu.setValue(this._value):this._datetimepicker?this._datetimepicker.setDate(this._value):s.setValue(this._input,this._value)}}),Object.assign(n.prototype,{_buildForm(){this._form=s.create("form"),this._inputGroup=s.create("div",{class:"filled"===this._settings.inputStyle?this.constructor.classes.inputGroupFilled:this.constructor.classes.inputGroupOutline}),s.append(this._form,this._inputGroup),this._renderInput(),this._settings.initInput?this._settings.initInput(this._input,this):this._settings.selectmenu?this._selectmenu=i.SelectMenu.init(this._input,this._settings.selectmenu):this._settings.datetimepicker&&(this._datetimepicker=i.DateTimePicker.init(this._input,this._settings.datetimepicker)),this._settings.buttons&&(this._submit=s.create("button",{html:`<span class="${this._settings.icons.save}"></span>`,class:this.constructor.classes.saveButton,attributes:{type:"submit"}}),s.append(this._inputGroup,this._submit),this._cancel=s.create("button",{html:`<span class="${this._settings.icons.cancel}"></span>`,class:this.constructor.classes.cancelButton,attributeS:{type:"button"}}),s.append(this._inputGroup,this._cancel))},_buildLoader(){this._loader=s.create("span",{class:this.constructor.classes.spinner})},_renderInput(){const t=s.create("div",{class:this.constructor.classes.inputContainer});s.append(this._inputGroup,t);const e={};let i;switch(this._settings.type){case"select":case"textarea":i=this._settings.type;break;default:i="input",e.type=this._settings.type}if(this._input=s.create(i,{class:"filled"===this._settings.inputStyle?this.constructor.classes.inputFilled:this.constructor.classes.inputOutline,attributes:{...e,...this._settings.inputAttributes}}),this._settings.inputClass&&s.addClass(this._input,this._settings.inputClass),s.append(t,this._input),"select"===this._settings.type&&this._settings.data)for(const t of this._settings.data){const e=s.create("option",{text:t.text,attributes:{value:t.value}});s.append(this._input,e)}if("filled"===this._settings.inputStyle){const e=s.create("div",{class:this.constructor.classes.inputRipple});s.append(t,e)}}}),n.defaults={type:"text",value:null,emptyText:"Empty",separator:", ",inputAttributes:{},inputClass:null,inputStyle:"filled",icons:{save:"icon icon-tick fw-bolder",cancel:"icon icon-cancel"},buttons:!0,getLabel:null,getValue:null,initInput:null,saveValue:t=>{},setValue:null,selectmenu:null,datetimepicker:null},n.classes={cancelButton:"btn btn-danger ripple",editable:"editable",empty:"editable-empty",inputContainer:"form-input",inputFilled:"input-filled",inputGroupFilled:"input-group input-group-filled",inputGroupOutline:"input-group input-group-outline",inputOutline:"input-outline",inputRipple:"ripple-line",saveButton:"btn btn-success ripple",spinner:"spinner-border spinner-border-sm text-primary"},i.initComponent("editable",n),i.Editable=n}));